
Optima for Ames data set:

val_rmse: $825.52
activation: elu
Predecessor level connectivity affinity factor first: 15.0313
Predecessor level connectivity affinity factor main: 10.046
Max consecutive lateral connectios: 23
p_lateral connection: 0.19668
Num lateral connection tries per unit: 20
Learning rate: 6.64e-2
Epochs: 96
Batch size 93


INPUT_SHAPES = [training_x[i].shape[1] for i in np.arange(len(training_x))]


# #alcohol_labels = tf.constant(pd.get_dummies(pd.cut(white['alcohol'], np.arange(
# #    white['alcohol'].min(), white['alcohol'].max()))).values)
# # quality_labels = tf.constant(pd.get_dummies(white['quality']).values)

# train_labels = [label.values]

OUTPUT_SHAPES = [1]  # [train_labels[i].shape[1]
# # for i in np.arange(len(train_labels))]

meta_trial_number = str(int(np.random.random() * 10 ** 12))

# With the train task ...

cerebros_automl = SimpleCerebrosRandomSearch(
    unit_type=DenseUnit,
    input_shapes=INPUT_SHAPES,
    output_shapes=OUTPUT_SHAPES,
    training_data=training_x,
    labels=train_labels,
    validation_split=0.35,
    direction='minimize',
    metric_to_rank_by='val_root_mean_squared_error',
    minimum_levels=2,
    maximum_levels=7,
    minimum_units_per_level=1,
    maximum_units_per_level=4,
    minimum_neurons_per_unit=1,
    maximum_neurons_per_unit=4,
    activation=activation,
    final_activation=None,
    number_of_architecture_moities_to_try=7,
    number_of_tries_per_architecture_moity=1,
    minimum_skip_connection_depth=1,
    maximum_skip_connection_depth=7,
    predecessor_level_connection_affinity_factor_first=predecessor_level_connection_affinity_factor_first,
    predecessor_level_connection_affinity_factor_first_rounding_rule='ceil',
    predecessor_level_connection_affinity_factor_main=predecessor_level_connection_affinity_factor_main,
    predecessor_level_connection_affinity_factor_main_rounding_rule='ceil',
    predecessor_level_connection_affinity_factor_decay_main=zero_7_exp_decay,
    seed=8675309,
    max_consecutive_lateral_connections=max_consecutive_lateral_connections,
    gate_after_n_lateral_connections=3,
    gate_activation_function=simple_sigmoid,
    p_lateral_connection=p_lateral_connection,
    p_lateral_connection_decay=zero_95_exp_decay,
    num_lateral_connection_tries_per_unit=num_lateral_connection_tries_per_unit,
    learning_rate=learning_rate,
    loss='mse',
    metrics=[tf.keras.metrics.RootMeanSquaredError()],
    epochs=epochs,
    project_name=f"{PROJECT_NAME}_meta_{meta_trial_number}",
    # use_multiprocessing_for_multiple_neural_networks=False,  # pull this param
    model_graphs='model_graphs',
    batch_size=batch_size,
    meta_trial_number=meta_trial_number)
val_root_mean_squared_error = cerebros_automl.run_random_search()
